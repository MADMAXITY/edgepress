'use client';

import { useState } from 'react';
import { BlogRules } from '@/types/blog';

interface BlogPreviewProps {
  blogRules: BlogRules | null;
  generatedContent: string;
  isLoading: boolean;
}

export default function BlogPreview({ blogRules, generatedContent, isLoading }: BlogPreviewProps) {
  const [isDownloading, setIsDownloading] = useState(false);

  const downloadHTML = () => {
    if (!blogRules || !generatedContent) return;

    setIsDownloading(true);

    const fullHTML = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${blogRules.title}</title>
    <meta name="description" content="${blogRules.metaDescription}">
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f9fafb;
        }
        .container {
            background: white;
            padding: 40px;
            border-radius: 12px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }
        h1 {
            font-size: 2.5rem;
            font-weight: 800;
            color: #1f2937;
            margin-bottom: 1rem;
            line-height: 1.2;
        }
        h2 {
            font-size: 1.875rem;
            font-weight: 700;
            color: #374151;
            margin-top: 2rem;
            margin-bottom: 1rem;
        }
        h3 {
            font-size: 1.5rem;
            font-weight: 600;
            color: #4b5563;
            margin-top: 1.5rem;
            margin-bottom: 0.75rem;
        }
        p {
            margin-bottom: 1rem;
            color: #374151;
        }
        ul {
            margin-bottom: 1rem;
            padding-left: 1.5rem;
        }
        li {
            margin-bottom: 0.5rem;
            color: #374151;
        }
        strong {
            font-weight: 600;
            color: #1f2937;
        }
        .cta {
            background: #3b82f6;
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            text-decoration: none;
            display: inline-block;
            margin-top: 2rem;
            font-weight: 500;
            transition: background-color 0.2s;
        }
        .cta:hover {
            background: #2563eb;
        }
        .metadata {
            font-size: 0.875rem;
            color: #6b7280;
            margin-bottom: 2rem;
        }
        @media (max-width: 768px) {
            body {
                padding: 10px;
            }
            .container {
                padding: 20px;
            }
            h1 {
                font-size: 2rem;
            }
            h2 {
                font-size: 1.5rem;
            }
            h3 {
                font-size: 1.25rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="metadata">
            Generated by EdgePress AI ‚Ä¢ Intent: ${blogRules.intent} ‚Ä¢ ${blogRules.readingGrade}th Grade Reading Level
        </div>
        <h1>${blogRules.title}</h1>
        ${generatedContent}
    </div>
</body>
</html>`;

    const blob = new Blob([fullHTML], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${blogRules.slug}.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    setIsDownloading(false);
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-semibold">Blog Preview</h2>
        {blogRules && !isLoading && generatedContent && (
          <button
            onClick={downloadHTML}
            disabled={isDownloading}
            className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 disabled:opacity-50"
          >
            {isDownloading ? 'Downloading...' : 'Download HTML'}
          </button>
        )}
      </div>

      {isLoading ? (
        <div className="flex flex-col items-center justify-center h-96">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4"></div>
          <p className="text-gray-600">Generating blog content...</p>
        </div>
      ) : generatedContent ? (
        <div className="border rounded-lg overflow-hidden">
          <div className="bg-gray-50 px-4 py-2 border-b">
            <div className="flex justify-between text-sm text-gray-600">
              <span>Intent: {blogRules?.intent}</span>
              <span>Grade: {blogRules?.readingGrade}</span>
              <span>Words: ~{blogRules?.wordTarget}</span>
            </div>
          </div>
          <div
            className="p-6 max-h-96 overflow-y-auto prose prose-lg max-w-none"
            dangerouslySetInnerHTML={{ __html: generatedContent }}
          />
        </div>
      ) : (
        <div className="flex flex-col items-center justify-center h-96 text-gray-500">
          <div className="text-6xl mb-4">üìù</div>
          <p className="text-lg">Configure your blog settings and click &quot;Generate&quot; to see the preview</p>
        </div>
      )}

      {blogRules && (
        <div className="mt-6 p-4 bg-gray-50 rounded-lg">
          <h3 className="font-medium text-gray-900 mb-2">Blog Configuration</h3>
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <span className="text-gray-600">Title:</span>
              <span className="ml-2 font-medium">{blogRules.title}</span>
            </div>
            <div>
              <span className="text-gray-600">Intent:</span>
              <span className="ml-2 font-medium">{blogRules.intent}</span>
            </div>
            <div>
              <span className="text-gray-600">Content Type:</span>
              <span className="ml-2 font-medium">{blogRules.contentType}</span>
            </div>
            <div>
              <span className="text-gray-600">Keywords:</span>
              <span className="ml-2 font-medium">
                {blogRules.targetKeywords.filter(k => k.trim()).join(', ')}
              </span>
            </div>
            <div className="col-span-2">
              <span className="text-gray-600">CTA:</span>
              <span className="ml-2 font-medium">{blogRules.cta}</span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}